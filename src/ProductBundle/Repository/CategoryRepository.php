<?php

namespace ProductBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
    /**
     * @param $parent
     * @return array
     */
    public function findByParentCache($parent)
    {
        $q = $this->createQueryBuilder('c');

        if ($parent == null) {
            $q->where('c.parent IS NULL');
        } else {
            $q->where('c.parent = :parent')->setParameter('parent', $parent);
        }

        return $q->getQuery()
            ->useResultCache(true, 3600, 'list_categories_by_parent')
            ->getResult();
    }

    /**
     * @param $slug
     * @return array
     */
    public function findBySlugCache($slug)
    {
        return $this->createQueryBuilder('c')
            ->where('c.slug = :slug')
            ->setParameter('slug', $slug)
            ->getQuery()
            ->useResultCache(true, 3600, 'list_categories-_by_slug')
            ->getResult();
    }

    /**
     * @param $parent
     * @return array
     */
    public function findByParentHavingChildrenCache($parent)
    {
        $q = $this->createQueryBuilder('c');

        if ($parent == null) {
            $q->where('c.parent IS NULL');
        } else {
            $q->where('c.parent = :parent')->setParameter('parent', $parent);
        }

        $q->leftJoin("c.children", "categories")
            ->groupBy("c.id")
            ->having("COUNT(categories.id) > 0");

        return $q->getQuery()
            ->useResultCache(true, 3600, 'list_categories_having_children_by_parent')
            ->getResult();
    }

    /**
     * @param int $limit
     * @return array
     */
    public function findByWithImageAndCollections($limit = 4)
    {
        return $this->createQueryBuilder("q")
            ->leftJoin('q.image', 'image')
            ->leftJoin('q.collections', 'collections')
            ->where("image.image IS NOT NULL")
            ->groupBy("q.id")
            ->having("COUNT(collections.id) > 0")
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }
}
