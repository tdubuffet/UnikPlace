<?php

namespace ProductBundle\Repository;

use ProductBundle\Entity\Product;
use UserBundle\Entity\User;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Product $product
     * @param $limit
     * @return array
     */
    public function findSimilarProducts(Product $product, $limit)
    {
        $total = $this->countSimilarProducts($product);

        $offset = rand(0, $total) - $limit;
        $offset = $offset < 0 ? 0 : $offset;

        $results = $this->createQueryBuilder('p')
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->where('p.id != :id')
            ->andWhere('p.category = :category_id')
            ->andWhere('p.status = :status')
            ->setParameters(['id' => $product->getId(), 'category_id' => $product->getCategory(), 'status' => 2])
            ->getQuery()
            ->getResult();

        if (count($results) > 0) {
            shuffle($results);
        }

        return $results;
    }

    /**
     * @param Product $product
     * @return int
     */
    public function countSimilarProducts($product)
    {
        return count($this->findBy(['category' => $product->getCategory()])) - 1;
    }

    /**
     * @param User $user
     * @param array $status
     * @return array
     * @throws \Exception
     */
    public function findForUserAndStatus(User $user, array $status)
    {
        if (count($status) != 3) {
            throw new \Exception("status must be an array with 3 fields");
        }
        $params = ['user' => $user, 'status1' => $status[0], 'status2' => $status[1], 'status3' => $status[1]];

        return $this->createQueryBuilder("q")
            ->orWhere("q.status = :status1")
            ->orWhere("q.status = :status2")
            ->orWhere("q.status = :status3")
            ->andWhere("q.user = :user")
            ->setParameters($params)
            ->getQuery()
            ->getResult();
    }
}
